
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"os"

	"golang.org/x/crypto/ssh"
)

func main() {
	// Replace with your router details
	host := "192.168.1.1"
	port := 22
	username := "admin"
	password := "your_password"

	// Connect to the router via SSH
	client, err := connectSSH(host, port, username, password)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Close()

	// Define router commands to execute
	commands := []string{
		"show ip interface brief",
		"show ip route",
		"show version",
	}

	// Execute each command and save the output
	var output string
	for _, command := range commands {
		session, err := client.NewSession()
		if err != nil {
			log.Fatal(err)
		}
		defer session.Close()

		// Run the command
		stdout, stderr, err := session.CombinedOutput(command)
		if err != nil {
			log.Println("Error:", err, "for command:", command)
			continue
		}

		// Combine standard output and standard error with a newline separator
		output += fmt.Sprintf("%s\n%s\n", string(stdout), string(stderr))
	}

	// Write the output to a file for further analysis
	err = ioutil.WriteFile("router_info.txt", []byte(output), 0644)
	if err != nil {
		log.Println("Error writing output:", err)
	} else {
		fmt.Println("Router information saved to router_info.txt")
	}
}

func connectSSH(host string, port int, username, password string) (*ssh.Client, error) {
	config := &ssh.ClientConfig{
		User: username,
		Auth: []ssh.AuthMethod{
			ssh.Password(password),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(), // Warning: Insecure for production use!
	}
	addr, err := net.ResolveTCPAddr("tcp", fmt.Sprintf("%s:%d", host, port))
	if err != nil {
		return nil, err
	}
	client, err := ssh.Dial("tcp", addr, config)
	if err != nil {
		return nil, err
	}
	return client, nil
}
