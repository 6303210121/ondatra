
package main

import (
    "bytes"
    "fmt"
    "io/ioutil"
    "net/http"
    "net/url"
)

func main() {
    // Define the router's IP address and login credentials
    routerIP := "10.133.35.158"
    username := "admin"
    password := "psp123"

    // Create a map of form data for the login request
    formData := url.Values{}
    formData.Set("username", username)
    formData.Set("password", password)

    // Send a POST request to the router's login endpoint
    resp, err := http.PostForm("http://"+routerIP+"/login", formData)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer resp.Body.Close()

    // Read the response body
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println("Error reading response body:", err)
        return
    }

    // Check the response status code
    if resp.StatusCode == http.StatusOK {
        fmt.Println("Login successful!")
        // You can perform further actions after successful login here
    } else {
        fmt.Printf("Login failed with status code: %d\n", resp.StatusCode)
        fmt.Println("Response body:", string(body))
    }
}

====================================================================================================================

package main

import (
    "net/http"
    "net/http/httptest"
    "testing"
)

func TestRouterLogin(t *testing.T) {
    // Start a test HTTP server
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Simulate a successful login response
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusOK)
            w.Write([]byte("Login successful"))
            return
        }
        // Handle unknown routes
        http.NotFound(w, r)
    }))
    defer srv.Close()

    // Override the router's IP address with the test server's address
    routerIP = srv.URL

    // Call the main function (login process)
    main()

    // Ideally, you would check the program's behavior after the login
    // For simplicity, let's just assume the program prints "Login successful!" for a successful login
}

_____---------------------------

package main

import (
    "bytes"
    "fmt"
    "io/ioutil"
    "net/http"
    "net/url"
)

var routerIP = "10.133.35.158"

func main() {
    // Define the login credentials
    username := "admin"
    password := "psp123"

    // Create a map of form data for the login request
    formData := url.Values{}
    formData.Set("username", username)
    formData.Set("password", password)

    // Send a POST request to the router's login endpoint
    resp, err := http.PostForm("http://"+routerIP+"/login", formData)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer resp.Body.Close()

    // Read the response body
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println("Error reading response body:", err)
        return
    }

    // Check the response status code
    if resp.StatusCode == http.StatusOK {
        fmt.Println("Login successful!")
        // You can perform further actions after successful login here
    } else {
        fmt.Printf("Login failed with status code: %d\n", resp.StatusCode)
        fmt.Println("Response body:", string(body))
    }
}

func Login() error {
    // Define the login credentials
    username := "admin"
    password := "psp123"

    // Create a map of form data for the login request
    formData := url.Values{}
    formData.Set("username", username)
    formData.Set("password", password)

    // Send a POST request to the router's login endpoint
    resp, err := http.PostForm("http://"+routerIP+"/login", formData)
    if err != nil {
        return err
    }
    defer resp.Body.Close()

    // Check the response status code
    if resp.StatusCode != http.StatusOK {
        return fmt.Errorf("login failed with status code: %d", resp.StatusCode)
    }

    return nil
}

===============â‰ˆ===================


package main

import (
    "net/http"
    "net/http/httptest"
    "testing"
)

func TestLoginSuccess(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusOK)
            w.Write([]byte("Login successful"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()
package main

import (
    "net/http"
    "net/http/httptest"
    "testing"
)

func TestLoginSuccess(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusOK)
            w.Write([]byte("Login successful"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err != nil {
        t.Errorf("Login failed with error: %v", err)
    }
}

func TestLoginFailure(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusUnauthorized)
            w.Write([]byte("Unauthorized"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err == nil {
        t.Error("Expected login to fail, but it succeeded")
    }
}
    if err != nil {
        t.Erropackage main

import (
    "net/http"
    "net/http/httptest"
    "testing"
)

func TestLoginSuccess(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusOK)
            w.Write([]byte("Login successful"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err != nil {
        t.Errorf("Login failed with error: %v", err)
    }
}

func TestLoginFailure(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusUnauthorized)
            w.Write([]byte("Unauthorized"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err == nil {
        t.Error("Expected login to fail, but it succeeded")
    }
}rf("Login failed with error: %v", err)
    }
}

func TestLoginFailure(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusUnauthorized)
            w.Write([]byte("Unauthorized"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err == npackage main

import (
    "net/http"
    "net/http/httptest"
    "testing"
)

func TestLoginSuccess(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusOK)
            w.Write([]byte("Login successful"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err != nil {
        t.Errorf("Login failed with error: %v", err)
    }
}

func TestLoginFailure(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusUnauthorized)
            w.Write([]byte("Unauthorized"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()package main

==================================================================================================

package main

import (
    "net/http"
    "net/http/httptest"
    "testing"
)

var routerIP string

func Login() error {
    if routerIP == "" {
        return nil // Return an error indicating that routerIP is undefined
    }
    // Dummy login function
    return nil
}

func TestLoginSuccess(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusOK)
            w.Write([]byte("Login successful"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err != nil {
        t.Errorf("Login failed with error: %v", err)
    }
}

func TestLoginFailure(t *testing.T) {
    srv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path == "/login" && r.Method == "POST" {
            w.WriteHeader(http.StatusUnauthorized)
            w.Write([]byte("Unauthorized"))
            return
        }
        http.NotFound(w, r)
    }))
    defer srv.Close()

    routerIP = srv.URL

    err := Login()

    if err == nil {
        t.Error("Expected login to fail, but it succeeded")
    }
}

func TestUndefinedRouterIP(t *testing.T) {
    // Ensure routerIP is initially undefined
    routerIP = ""
    
    // Call the Login function
    err := Login()

    // Check if the login failed as expected
    if err == nil {
        t.Error("Expected login to fail due to undefined routerIP, but it succeeded")
    }
}

