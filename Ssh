
// main.go
package main

import (
	"fmt"
	"golang.org/x/crypto/ssh"
	"log"
)

// SSHClientInterface defines an interface for the SSH client.
type SSHClientInterface interface {
	Dial(network, addr string, config *ssh.ClientConfig) (*ssh.Client, error)
	NewSession(client *ssh.Client) (*ssh.Session, error)
}

// SSHClient implements the SSHClientInterface.
type SSHClient struct{}

func (c *SSHClient) Dial(network, addr string, config *ssh.ClientConfig) (*ssh.Client, error) {
	return ssh.Dial(network, addr, config)
}

func (c *SSHClient) NewSession(client *ssh.Client) (*ssh.Session, error) {
	return client.NewSession()
}

func testSSHConnection(sshClient SSHClientInterface) error {
	routerIP := "10.133.35.158"
	sshUsername := "your_ssh_username"
	sshPassword := "your_ssh_password"

	config := &ssh.ClientConfig{
		User: sshUsername,
		Auth: []ssh.AuthMethod{
			ssh.Password(sshPassword),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	client, err := sshClient.Dial("tcp", fmt.Sprintf("%s:22", routerIP), config)
	if err != nil {
		return fmt.Errorf("Failed to dial: %v", err)
	}
	defer client.Close()

	session, err := sshClient.NewSession(client)
	if err != nil {
		return fmt.Errorf("Failed to create session: %v", err)
	}
	defer session.Close()

	output, err := session.CombinedOutput("show interface status")
	if err != nil {
		return fmt.Errorf("Failed to execute command: %v", err)
	}

	fmt.Println("Logged into the router.")
	fmt.Printf("Interface Status:\n%s\n", output)

	return nil
}

// main function
func main() {
	// Assuming you want to test SSH connection in the main function
	sshClient := &SSHClient{}
	if err := testSSHConnection(sshClient); err != nil {
		log.Fatal(err)
	}
}
